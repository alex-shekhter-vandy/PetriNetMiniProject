/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Aug 09 2022 05:24:23 GMT+0000 (Coordinated Universal Time).
 */

define(['jointjs','css!./styles/PetriNetVisualizerWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'petri-net-visualizer';

    function PetriNetVisualizerWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    PetriNetVisualizerWidget.prototype._initialize = function () {
        console.log( joint );

        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        this._jointPetriNet = new joint.dia.Graph;
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width : width,
            height: height,
            model: this._jointPetriNet,
            interactive: false
        });

        // add event calls to elements
        this._jointPaper.on('element:pointerdblclick', function(elementView) {
            const currentElement = elementView.model;
            console.debug( "_initialize::currentElement: ", currentElement, JSON.stringify( currentElement ) );
            if (self._webgmePetriNet) {
                console.debug(self._webgmePetriNet.id2place[currentElement.id]);
                self._setCurrentPlace(self._webgmePetriNet.id2place[currentElement.id]);
            }
        });

        // this._webgmePetriNet = null;        
        // // Create a dummy header
        // this._el.append('<h3>PetriNetVisualizer Events:</h3>');

        // // Registering to events can be done with jQuery (as normal)
        // this._el.on('dblclick', function (event) {
        //     event.stopPropagation();
        //     event.preventDefault();
        //     self.onBackgroundDblClick();
        // });
    };

    PetriNetVisualizerWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    PetriNetVisualizerWidget.prototype.polarToCartesian = function (center_x, center_y, radius, angle_in_degrees) {
        var return_value = {}
        var angle_in_radians =  angle_in_degrees * Math.PI / 180.0;
            return_value.x =    center_x + radius * Math.cos(angle_in_radians);
            return_value.y =    center_y + radius * Math.sin(angle_in_radians);
        return return_value;
    }
    
    PetriNetVisualizerWidget.prototype.showPlaceTokens = function (placeVertex, placeMeta, diameter ) {
        var self = this;

        console.debug( "placeVertex: ", placeVertex );
        console.debug( "placeMeta: ", placeMeta );
        console.debug( "Leaving place tokens" );
        
        // The center is the same for all circles
        const vpos = placeVertex.attributes.position;
        const vr = diameter/2;
        var cx = vpos.x + vr;
        var cy = vpos.y + vr;

        var radius_of_satellites_from_center = 30;
        var radius_of_small_circles = 4
        var number_of_satellite_circles = placeMeta.tokens;

        //  The angle increments for each circle drawn
        for(var n=0; n<number_of_satellite_circles; n++){

            //  Find how many degrees separate each circle
            var degrees_of_separation = 360/number_of_satellite_circles;

            var angle_as_degrees = degrees_of_separation * n;

            var coordinates = self.polarToCartesian(cx, cy, radius_of_satellites_from_center, angle_as_degrees);

            let vertex = new joint.shapes.standard.Circle({
                    position: {
                        x: coordinates.x - radius_of_small_circles,
                        y: coordinates.y -radius_of_small_circles
                    },
                    size: { width: radius_of_small_circles * 2, height: radius_of_small_circles * 2 },
                    attrs: {
                        body: {
                            fill: 'blue',
                            cursor: 'pointer'
                        },
                    }
            });
            vertex.addTo( placeVertex.graph );
        }    
    }

    // PetriNet manipulating functions called from the controller
    PetriNetVisualizerWidget.prototype.initPetriNet = function (petriNetDescriptor) {
        const self = this;
        console.log(petriNetDescriptor);

        self._webgmePetriNet = petriNetDescriptor;
        self._webgmePetriNet.current = self._webgmePetriNet.init;
        self._jointPetriNet.clear();
        const pn = self._webgmePetriNet;
        pn.id2place = {}; // this dictionary will connect the on-screen id to the state id first add the places
        pn.id2transition = {};
        pn.placesAndTransitions = {};
        Object.keys(pn.places).forEach(elemId => {
            let vertex = new joint.shapes.standard.Circle({
                    position: pn.places[elemId].position,
                    size: { width: 80, height: 80 },
                    attrs: {
                        body: {
                            fill: 'white',
                            cursor: 'pointer'
                        },
                        label: {
                            text: pn.places[elemId].name,
                            fill: 'black'
                        }
                    }
                });
            vertex.addTo(self._jointPetriNet);
            self.showPlaceTokens( vertex, pn.places[ elemId ], 80 );
            pn.places[elemId].joint = vertex;
            pn.id2place[vertex.id] = elemId;
        });

        // Transitions
        Object.keys(pn.transitions).forEach(elemId => {
            let vertex = new joint.shapes.standard.Rectangle({
                position: pn.transitions[elemId].position,
                size: { width: 40, height: 80 },
                attrs: {
                    body: {
                        fill: "white",
                        cursor: "pointer"
                    },
                    label: {
                        text: pn.transitions[elemId].name,
                        fill: 'black'
                    }
                }
            });
            vertex.addTo(self._jointPetriNet);
            pn.transitions[elemId].joint = vertex;
            pn.id2transition[vertex.id] = elemId;
        });

        // then create the links
        pn.placesAndTransitions = {
            ...pn.places,
            ...pn.transitions
        };
        Object.keys(pn.placesAndTransitions).forEach(elemId => {
            const elem = pn.placesAndTransitions[elemId];
            elem.next.forEach(arc => {
                elem.jointNext = elem.jointNext || {};
                const link = new joint.shapes.standard.Link({
                    source: { id: elem.joint.id },
                    target: { id: pn.placesAndTransitions[arc.node].joint.id },
                    attrs: {
                        line: {
                            strokeWidth: 2
                        },
                        wrapper: {
                            cursor: 'default'
                        }
                    },
                    labels: [{
                        position: {
                            distance: 0.5,
                            offset: 0,
                            args: {
                                keepGradient: true,
                                ensureLegibility: true
                            }
                        },
                        attrs: {
                            text: {
                                text: arc.name,
                                fontWeight: 'bold'
                            }
                        }
                    }]
                });
                link.addTo(self._jointPetriNet);
                elem.jointNext[arc] = link;
            });
        });

        //now refresh the visualization
        self._jointPaper.updateViews();
        self._decoratePetriNet();
    };

    PetriNetVisualizerWidget.prototype.destroyPetriNet = function () {

    };

    PetriNetVisualizerWidget.prototype.fireEvent = function (event) {
        const self = this;
        const current = self._webgmePetriNet.places[self._webgmePetriNet.current];
        const link = current.jointNext[event];
        const linkView = link.findView(self._jointPaper);
        linkView.sendToken(joint.V('circle', { r: 10, fill: 'black' }), {duration:500}, function() {
           self._webgmePetriNet.current = current.next[event];
           self._decoratePetriNet();
        });
    };

    PetriNetVisualizerWidget.prototype.resetPetriNet = function () {
        this._webgmePetriNet.current = this._webgmePetriNet.init;
        this._decoratePetriNet();
    };

    PetriNetVisualizerWidget.prototype._decoratePetriNet = function() {
        const pn = this._webgmePetriNet;
        Object.keys(pn.places).forEach(stateId => {
            pn.places[stateId].joint.attr('body/stroke', '#333333');
        });
        console.debug( "_decoratePetriNet::pn", JSON.stringify(pn), pn );
        if ( pn.current ) {
            pn.places[pn.current].joint.attr('body/stroke', 'blue');
            pn.setFireableEvents(Object.keys(pn.states[pn.current].next));
        }
    };

    PetriNetVisualizerWidget.prototype._setCurrentPlace = function(newCurrent) {
        this._webgmePetriNet.current = newCurrent;
        this._decoratePetriNet();
    };
    

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriNetVisualizerWidget.prototype.destroy = function () {
    };

    PetriNetVisualizerWidget.prototype.onActivate = function () {
        this._logger.debug('PetriNetVisualizerWidget has been activated');
    };

    PetriNetVisualizerWidget.prototype.onDeactivate = function () {
        this._logger.debug('PetriNetVisualizerWidget has been deactivated');
    };

    PetriNetVisualizerWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    PetriNetVisualizerWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };


    return PetriNetVisualizerWidget;

    // // Adding/Removing/Updating items
    // PetriNetVisualizerWidget.prototype.addNode = function (desc) {
    //     if (desc) {
    //         // Add node to a table of nodes
    //         var node = document.createElement('div'),
    //             label = 'children';

    //         if (desc.childrenIds.length === 1) {
    //             label = 'child';
    //         }

    //         this.nodes[desc.id] = desc;
    //         node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
    //             desc.childrenIds.length + ' ' + label + '.';

    //         this._el.append(node);
    //         node.onclick = this.onNodeClick.bind(this, desc.id);
    //     }
    // };

    // PetriNetVisualizerWidget.prototype.removeNode = function (gmeId) {
    //     var desc = this.nodes[gmeId];
    //     this._el.append('<div>Removing node "' + desc.name + '"</div>');
    //     delete this.nodes[gmeId];
    // };

    // PetriNetVisualizerWidget.prototype.updateNode = function (desc) {
    //     if (desc) {
    //         this._logger.debug('Updating node:', desc);
    //         this._el.append('<div>Updating node "' + desc.name + '"</div>');
    //     }
    // };

    // /* * * * * * * * Visualizer event handlers * * * * * * * */

    // PetriNetVisualizerWidget.prototype.onNodeClick = function (/*id*/) {
    //     // This currently changes the active node to the given id and
    //     // this is overridden in the controller.
    // };

    // PetriNetVisualizerWidget.prototype.onBackgroundDblClick = function () {
    //     this._el.append('<div>Background was double-clicked!!</div>');
    // };

    // /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    // PetriNetVisualizerWidget.prototype.destroy = function () {
    // };

    // PetriNetVisualizerWidget.prototype.onActivate = function () {
    //     this._logger.debug('PetriNetVisualizerWidget has been activated');
    // };

    // PetriNetVisualizerWidget.prototype.onDeactivate = function () {
    //     this._logger.debug('PetriNetVisualizerWidget has been deactivated');
    // };

    // return PetriNetVisualizerWidget;
});
