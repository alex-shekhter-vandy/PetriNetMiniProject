/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Aug 09 2022 05:24:23 GMT+0000 (Coordinated Universal Time).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function PetriNetVisualizerControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._networkRootLoaded = false;

        this._fireableEvents = null;

        this._initWidgetEventHandlers();

        this.setFireableEvents = this.setFireableEvents.bind(this);

        this._logger.debug('ctor finished');
    }

    PetriNetVisualizerControl.prototype._initWidgetEventHandlers = function () {
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    PetriNetVisualizerControl.prototype.selectedObjectChanged = function (nodeId) {
        var desc = this._getObjectDescriptor(nodeId),
            self = this;

        self._logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
            self._networkRootLoaded = false;
        }

        self._currentNodeId = nodeId;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = {children: 1};  // Territory "rule"

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory
            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }

        // self._currentNodeParentId = undefined;

        // if (typeof self._currentNodeId === 'string') {
        //     // Put new node's info into territory rules
        //     self._selfPatterns = {};
        //     self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

        //     self._widget.setTitle(desc.name.toUpperCase());

        //     if (typeof desc.parentId === 'string') {
        //         self.$btnModelHierarchyUp.show();
        //     } else {
        //         self.$btnModelHierarchyUp.hide();
        //     }

        //     self._currentNodeParentId = desc.parentId;

        //     self._territoryId = self._client.addUI(self, function (events) {
        //         self._eventCallback(events);
        //     });

        //     // Update the territory
        //     self._client.updateTerritory(self._territoryId, self._selfPatterns);

        //     self._selfPatterns[nodeId] = {children: 1};
        //     self._client.updateTerritory(self._territoryId, self._selfPatterns);
        // }
    };

    // This next function retrieves the relevant node information for the widget
    PetriNetVisualizerControl.prototype._getObjectDescriptor = function (nodeId) {
        var node = this._client.getNode(nodeId),
            objDescriptor;
        if (node) {
            objDescriptor = {
                id: node.getId(),
                name: node.getAttribute(nodePropertyNames.Attributes.name),
                childrenIds: node.getChildrenIds(),
                parentId: node.getParentId(),
                isConnection: GMEConcepts.isConnection(nodeId)
            };
        }

        return objDescriptor;
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    PetriNetVisualizerControl.prototype._eventCallback = function (events) {
        const self = this;
        console.log(events);
        events.forEach(event => {
            if (event.eid && 
                event.eid === self._currentNodeId ) {
                    if (event.etype == 'load' || event.etype == 'update') {
                        self._networkRootLoaded = true;
                    } else {
                        self.clearPetriNet();
                        return;
                    }
                }
                
        });

        if (events.length && events[0].etype === 'complete' && self._networkRootLoaded) {
            // complete means we got all requested data and we do not have to wait for additional load cycles
            self._initPetriNet();
        }       
        // var i = events ? events.length : 0,
        //     event;

        // this._logger.debug('_eventCallback \'' + i + '\' items');

        // while (i--) {
        //     event = events[i];
        //     switch (event.etype) {

        //     case CONSTANTS.TERRITORY_EVENT_LOAD:
        //         this._onLoad(event.eid);
        //         break;
        //     case CONSTANTS.TERRITORY_EVENT_UPDATE:
        //         this._onUpdate(event.eid);
        //         break;
        //     case CONSTANTS.TERRITORY_EVENT_UNLOAD:
        //         this._onUnload(event.eid);
        //         break;
        //     default:
        //         break;
        //     }
        // }

        // this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    PetriNetVisualizerControl.prototype._initPetriNet = function () {
        const self = this;
        //just for the ease of use, lets create a META dictionary
        const rawMETA = self._client.getAllMetaNodes();
        const META = {};
        rawMETA.forEach(node => {
            META[node.getAttribute('name')] = node.getId(); //we just need the id...
        });
        self._logger.debug( "_initPetriNet::META " + JSON.stringify( META ) );
        //now we collect all data we need for network visualization
        //we need our states (names, position, type), need the set of next state (with event names)
        const pnNode = self._client.getNode(self._currentNodeId);
        const elementIds = pnNode.getChildrenIds();
        const pn = {init: null, places:{}, transitions: {}};
        elementIds.forEach(elementId => {
            const node = self._client.getNode(elementId);
            // the simple way of checking type
            const isTransition = node.isTypeOf(META['Transition']);
            const isPlace = node.isTypeOf(META['Place']);
            if (isPlace || isTransition) {

                //right now we only interested in states...
                const elem = {
                    name: node.getAttribute('name'), 
                    next: [], 
                    position: node.getRegistry('position'),
                    tokens: node.getAttribute('tokens')
                    // isEnd: node.isTypeOf(META['End'])
                };
                // // one way to check meta-type in the client context - though it does not check for generalization types like State
                // if ('Init' === self._client.getNode(node.getMetaTypeId()).getAttribute('name')) {
                //     pn.init = elementId;
                // }

                // this is in no way optimal, but shows clearly what we are looking for when we collect the data
                elementIds.forEach(nextId => {
                    const nextNode = self._client.getNode(nextId);
                    const isArc = nextNode.isTypeOf(META['InplaceArc']) || nextNode.isTypeOf(META['OutplaceArc']);
                    if( isArc && nextNode.getPointerId('src') === elementId) {
                        elem.next.push({
                            name: nextNode.getAttribute('name'),
                            node: nextNode.getPointerId('dst')
                        });
                        // elem.next[nextNode.getAttribute('name')] = nextNode.getPointerId('dst');
                    }
                });
                if ( isPlace ) pn.places[elementId] = elem;
                else pn.transitions[elementId] = elem;
            }
        });
        pn.setFireableEvents = this.setFireableEvents;

        self._widget.initPetriNet(pn);
    };

    PetriNetVisualizerControl.prototype.clearPetriNet = function () {
        const self = this;
        self._networkRootLoaded = false;
        self._widget.destroyPetriNet();
    };

    PetriNetVisualizerControl.prototype.setFireableEvents = function (events) {
        this._fireableEvents = events;
        if (events && events.length > 1) {
            // we need to fill the dropdow button with options
            this.$btnEventSelector.clear();
            events.forEach(event => {
                this.$btnEventSelector.addButton({
                    text: event,
                    title: 'fire event: '+ event,
                    data: {event: event},
                    clickFn: data => {
                        this._widget.fireEvent(data.event);
                    }
                });
            });
        } else if (events && events.length === 0) {
            this._fireableEvents = null;
        }

        this._displayToolbarItems();
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriNetVisualizerControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    PetriNetVisualizerControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    PetriNetVisualizerControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    PetriNetVisualizerControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    PetriNetVisualizerControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    PetriNetVisualizerControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
            if (this._fireableEvents === null) {
                this.$btnEventSelector.hide();
                this.$btnSingleEvent.hide();
            } else if (this._fireableEvents.length == 1) {
                this.$btnEventSelector.hide();
            } else {
                this.$btnSingleEvent.hide();
            }
        } else {
            this._initializeToolbar();
        }
    };

    PetriNetVisualizerControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    PetriNetVisualizerControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    PetriNetVisualizerControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnReachCheck = toolBar.addButton({
            title: 'Check state machine reachability properties',
            icon: 'glyphicon glyphicon-question-sign',
            clickFn: function (/*data*/) {
                const context = self._client.getCurrentPluginContext('ReachCheck',self._currentNodeId, []);
                // !!! it is important to fill out or pass an empty object as the plugin config otherwise we might get errors...
                context.pluginConfig = {};
                self._client.runServerPlugin(
                    'ReachCheck', 
                    context, 
                    function(err, result){
                        // here comes any additional processing of results or potential errors.
                        console.log('plugin err:', err);
                        console.log('plugin result:', result);
                });
            }
        });
        this._toolbarItems.push(this.$btnReachCheck);

        this.$btnResetPetriNet = toolBar.addButton({
            title: 'Reset simulator',
            icon: 'glyphicon glyphicon-fast-backward',
            clickFn: function (/*data*/) {
                self._widget.resetPetriNet();
            }
        });
        this._toolbarItems.push(this.$btnResetPetriNet);

        // when there are multiple events to choose from we offer a selector
        this.$btnEventSelector = toolBar.addDropDownButton({
            text: 'event'
        });
        this._toolbarItems.push(this.$btnEventSelector);
        this.$btnEventSelector.hide();

        // if there is only one event we just show a play button
        this.$btnSingleEvent = toolBar.addButton({
            title: 'Fire event',
            icon: 'glyphicon glyphicon-play',
            clickFn: function (/*data*/) {
                self._widget.fireEvent(self._fireableEvents[0]);
            }
        });
        this._toolbarItems.push(this.$btnSingleEvent);
        

        /************** Dropdown for event progression *******************/


        this._toolbarInitialized = true;
    };

    PetriNetVisualizerControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    return PetriNetVisualizerControl;
}
//     PetriNetVisualizerControl.prototype._onLoad = function (gmeId) {
//         var description = this._getObjectDescriptor(gmeId);
//         this._widget.addNode(description);
//     };

//     PetriNetVisualizerControl.prototype._onUpdate = function (gmeId) {
//         var description = this._getObjectDescriptor(gmeId);
//         this._widget.updateNode(description);
//     };

//     PetriNetVisualizerControl.prototype._onUnload = function (gmeId) {
//         this._widget.removeNode(gmeId);
//     };


//     /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
//     PetriNetVisualizerControl.prototype.destroy = function () {
//         this._detachClientEventListeners();
//         this._removeToolbarItems();
//     };

//     PetriNetVisualizerControl.prototype._attachClientEventListeners = function () {
//         this._detachClientEventListeners();
//         WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
//     };

//     PetriNetVisualizerControl.prototype._detachClientEventListeners = function () {
//         WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
//     };

//     PetriNetVisualizerControl.prototype.onActivate = function () {
//         this._attachClientEventListeners();
//         this._displayToolbarItems();

//         if (typeof this._currentNodeId === 'string') {
//             WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
//         }
//     };

//     PetriNetVisualizerControl.prototype.onDeactivate = function () {
//         this._detachClientEventListeners();
//         this._hideToolbarItems();
//     };

//     /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
//     PetriNetVisualizerControl.prototype._displayToolbarItems = function () {

//         if (this._toolbarInitialized === true) {
//             for (var i = this._toolbarItems.length; i--;) {
//                 this._toolbarItems[i].show();
//             }
//         } else {
//             this._initializeToolbar();
//         }
//     };

//     PetriNetVisualizerControl.prototype._hideToolbarItems = function () {

//         if (this._toolbarInitialized === true) {
//             for (var i = this._toolbarItems.length; i--;) {
//                 this._toolbarItems[i].hide();
//             }
//         }
//     };

//     PetriNetVisualizerControl.prototype._removeToolbarItems = function () {

//         if (this._toolbarInitialized === true) {
//             for (var i = this._toolbarItems.length; i--;) {
//                 this._toolbarItems[i].destroy();
//             }
//         }
//     };

//     PetriNetVisualizerControl.prototype._initializeToolbar = function () {
//         var self = this,
//             toolBar = WebGMEGlobal.Toolbar;

//         this._toolbarItems = [];

//         this._toolbarItems.push(toolBar.addSeparator());

//         /************** Go to hierarchical parent button ****************/
//         this.$btnModelHierarchyUp = toolBar.addButton({
//             title: 'Go to parent',
//             icon: 'glyphicon glyphicon-circle-arrow-up',
//             clickFn: function (/*data*/) {
//                 WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
//             }
//         });
//         this._toolbarItems.push(this.$btnModelHierarchyUp);
//         this.$btnModelHierarchyUp.hide();

//         /************** Checkbox example *******************/

//         this.$cbShowConnection = toolBar.addCheckBox({
//             title: 'toggle checkbox',
//             icon: 'gme icon-gme_diagonal-arrow',
//             checkChangedFn: function (data, checked) {
//                 self._logger.debug('Checkbox has been clicked!');
//             }
//         });
//         this._toolbarItems.push(this.$cbShowConnection);

//         this._toolbarInitialized = true;
//     };

//     return PetriNetVisualizerControl;
// }
);
